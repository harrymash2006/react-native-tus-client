/** Object used to setup a tus upload */
interface Options {
    /** URL used to create a new upload */
    endpoint: string;

    /** An object with custom header values used in all requests. */
    headers?: object;

    /** An object with string values used as additional meta data
     * which will be passed along to the server when (and only when)
     * creating a new upload. Can be used for filenames, file types etc.
     */
    metadata?: object;

    /**
     * A function called once an error appears.
     * @param error and Error instance
     */
    onError?(error: Error): void;

    /**
     * A function that will be called each time progress information is available.
     * @param progress number between 0 and 1 representing upload progress
     */
    onProgress?(progress: number): void;

    /**
     * A function called when the upload finished successfully.
     */
    onSuccess?(): void;
}

/** Class representing a tus upload */
declare class Upload {
    /**
     * Reference to the file absolute path.
     */
    readonly file: string;

    /**
     * The URL used to upload the file generated by the library.
     * The client will set this property to the new upload URL.
     */
    url: string;

    private options: Options;
    private subscriptions: Array<{ remove: () => void }>;
    private uploadId: string | null;

    /**
     * @param file The file absolute path.
     * @param settings The options argument used to setup your tus upload.
     */
    constructor(file: string, options: Options);

    /**
     * Start or resume the upload using the specified file.
     * If no file property is available the error handler will be called.
     */
    start(): Promise<void>;

    /**
     * Abort the currently running upload request and don't continue.
     * You can resume the upload by calling the start method again.
     */
    abort(): Promise<void>;

    /**
     * Get the current upload progress
     * @returns A promise that resolves to a number between 0 and 1
     */
    getProgress(): Promise<number>;

    private emitError(error: Error): void;
    private subscribe(): void;
    private unsubscribe(): void;
    private onSuccess(): void;
    private onProgress(progress: number): void;
    private onError(error: Error): void;
}

export { Options, Upload };
